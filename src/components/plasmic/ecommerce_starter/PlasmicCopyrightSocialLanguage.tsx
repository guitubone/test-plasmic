// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bKpefHuncX8cEW37wPMjAY
// Component: ZEjrHd9Sj00z
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: whXBuzPs67oZ/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_ecommerce_starter.module.css"; // plasmic-import: bKpefHuncX8cEW37wPMjAY/projectcss
import * as sty from "./PlasmicCopyrightSocialLanguage.module.css"; // plasmic-import: ZEjrHd9Sj00z/css

import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: WpDlUhOlxl-u/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: wH-q_ZHHI5xE/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: 0CstZd6DV2ch/icon
import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: 7oRSR7Mf1t-V/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: huiTPv2FStCq/icon

export type PlasmicCopyrightSocialLanguage__VariantMembers = {};

export type PlasmicCopyrightSocialLanguage__VariantsArgs = {};
type VariantPropType = keyof PlasmicCopyrightSocialLanguage__VariantsArgs;
export const PlasmicCopyrightSocialLanguage__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCopyrightSocialLanguage__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCopyrightSocialLanguage__ArgsType;
export const PlasmicCopyrightSocialLanguage__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicCopyrightSocialLanguage__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultCopyrightSocialLanguageProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicCopyrightSocialLanguage__RenderFunc(props: {
  variants: PlasmicCopyrightSocialLanguage__VariantsArgs;
  args: PlasmicCopyrightSocialLanguage__ArgsType;
  overrides: PlasmicCopyrightSocialLanguage__OverridesType;
  dataFetches?: PlasmicCopyrightSocialLanguage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox___7ByZn)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__cHbF7
                  )}
                >
                  {"Â© 2021 ShoeShop, Inc. All Rights Reserved."}
                </div>

                <div
                  className={classNames(defaultcss.all, sty.freeBox___6Rdqp)}
                >
                  <Button
                    icons={"only" as const}
                    link2={"http://twitter.com" as const}
                  >
                    <Icon27Icon
                      className={classNames(defaultcss.all, sty.svg__f5EDp)}
                      role={"img"}
                    />
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button__ph4Oq)}
                    icons={"only" as const}
                    link2={"http://youtube.com" as const}
                  >
                    <Icon28Icon
                      className={classNames(defaultcss.all, sty.svg__ctZhQ)}
                      role={"img"}
                    />
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button___6NGr)}
                    icons={"only" as const}
                    link2={"http://pinterest.com" as const}
                  >
                    <Icon29Icon
                      className={classNames(defaultcss.all, sty.svg__xdUsb)}
                      role={"img"}
                    />
                  </Button>
                </div>
              </p.Stack>

              <Button
                children2={
                  <Icon15Icon
                    className={classNames(defaultcss.all, sty.svg__lMa0B)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.button__ovIkr)}
                icons={"end" as const}
                slot={"English"}
              >
                <Icon15Icon
                  className={classNames(defaultcss.all, sty.svg___07Y)}
                  role={"img"}
                />
              </Button>
            </React.Fragment>
          ),
          value: args.children
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCopyrightSocialLanguage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCopyrightSocialLanguage__VariantsArgs;
    args?: PlasmicCopyrightSocialLanguage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCopyrightSocialLanguage__Fetches;
  } & Omit<PlasmicCopyrightSocialLanguage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCopyrightSocialLanguage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCopyrightSocialLanguage__ArgProps,
      internalVariantPropNames: PlasmicCopyrightSocialLanguage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCopyrightSocialLanguage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCopyrightSocialLanguage";
  } else {
    func.displayName = `PlasmicCopyrightSocialLanguage.${nodeName}`;
  }
  return func;
}

export const PlasmicCopyrightSocialLanguage = Object.assign(
  // Top-level PlasmicCopyrightSocialLanguage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicCopyrightSocialLanguage
    internalVariantProps: PlasmicCopyrightSocialLanguage__VariantProps,
    internalArgProps: PlasmicCopyrightSocialLanguage__ArgProps
  }
);

export default PlasmicCopyrightSocialLanguage;
/* prettier-ignore-end */
