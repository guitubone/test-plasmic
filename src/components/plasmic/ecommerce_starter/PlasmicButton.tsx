// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bKpefHuncX8cEW37wPMjAY
// Component: whXBuzPs67oZ
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_ecommerce_starter.module.css"; // plasmic-import: bKpefHuncX8cEW37wPMjAY/projectcss
import * as sty from "./PlasmicButton.module.css"; // plasmic-import: whXBuzPs67oZ/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: wH-q_ZHHI5xE/icon

export type PlasmicButton__VariantMembers = {
  icons: "none" | "end" | "both" | "only" | "five";
  colors:
    | "gray"
    | "white"
    | "blue"
    | "black"
    | "lightGray"
    | "lightGrayOutline";
  size: "large" | "small" | "narrow";
  rounded: "rounded";
  link: "link";
  states: "active";
};

export type PlasmicButton__VariantsArgs = {
  icons?: SingleChoiceArg<"none" | "end" | "both" | "only" | "five">;
  colors?: SingleChoiceArg<
    "gray" | "white" | "blue" | "black" | "lightGray" | "lightGrayOutline"
  >;
  size?: SingleChoiceArg<"large" | "small" | "narrow">;
  rounded?: SingleBooleanChoiceArg<"rounded">;
  link?: SingleBooleanChoiceArg<"link">;
  states?: SingleChoiceArg<"active">;
};

type VariantPropType = keyof PlasmicButton__VariantsArgs;
export const PlasmicButton__VariantProps = new Array<VariantPropType>(
  "icons",
  "colors",
  "size",
  "rounded",
  "link",
  "states"
);

export type PlasmicButton__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children32?: React.ReactNode;
  children322?: React.ReactNode;
  children3222?: React.ReactNode;
  link2?: string | PageHref;
};

type ArgPropType = keyof PlasmicButton__ArgsType;
export const PlasmicButton__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "children2",
  "children3",
  "children32",
  "children322",
  "children3222",
  "link2"
);

export type PlasmicButton__OverridesType = {
  root?: p.Flex<"a">;
};

export interface DefaultButtonProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children32?: React.ReactNode;
  children322?: React.ReactNode;
  children3222?: React.ReactNode;
  link2?: string | PageHref;
  icons?: SingleChoiceArg<"none" | "end" | "both" | "only" | "five">;
  colors?: SingleChoiceArg<
    "gray" | "white" | "blue" | "black" | "lightGray" | "lightGrayOutline"
  >;
  size?: SingleChoiceArg<"large" | "small" | "narrow">;
  rounded?: SingleBooleanChoiceArg<"rounded">;
  link?: SingleBooleanChoiceArg<"link">;
  states?: SingleChoiceArg<"active">;
  className?: string;
}

function PlasmicButton__RenderFunc(props: {
  variants: PlasmicButton__VariantsArgs;
  args: PlasmicButton__ArgsType;
  overrides: PlasmicButton__OverridesType;
  dataFetches?: PlasmicButton__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"a"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__colors_black]: hasVariant(variants, "colors", "black"),
        [sty.root__colors_blue]: hasVariant(variants, "colors", "blue"),
        [sty.root__colors_gray]: hasVariant(variants, "colors", "gray"),
        [sty.root__colors_lightGrayOutline]: hasVariant(
          variants,
          "colors",
          "lightGrayOutline"
        ),
        [sty.root__colors_lightGray]: hasVariant(
          variants,
          "colors",
          "lightGray"
        ),
        [sty.root__colors_white]: hasVariant(variants, "colors", "white"),
        [sty.root__icons_end]: hasVariant(variants, "icons", "end"),
        [sty.root__icons_five]: hasVariant(variants, "icons", "five"),
        [sty.root__icons_none]: hasVariant(variants, "icons", "none"),
        [sty.root__link]: hasVariant(variants, "link", "link"),
        [sty.root__rounded]: hasVariant(variants, "rounded", "rounded"),
        [sty.root__rounded_size_large]:
          hasVariant(variants, "rounded", "rounded") &&
          hasVariant(variants, "size", "large"),
        [sty.root__size_large]: hasVariant(variants, "size", "large"),
        [sty.root__size_narrow]: hasVariant(variants, "size", "narrow"),
        [sty.root__size_small]: hasVariant(variants, "size", "small"),
        [sty.root__states_active]: hasVariant(variants, "states", "active")
      })}
      href={args.link2}
    >
      {(
        hasVariant(variants, "icons", "end")
          ? false
          : hasVariant(variants, "icons", "none")
          ? false
          : true
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__wSxoi, {
            [sty.freeBox__icons_end__wSxoiaRdN3]: hasVariant(
              variants,
              "icons",
              "end"
            ),
            [sty.freeBox__icons_five__wSxoigyw2T]: hasVariant(
              variants,
              "icons",
              "five"
            ),
            [sty.freeBox__icons_none__wSxoiy08Cm]: hasVariant(
              variants,
              "icons",
              "none"
            ),
            [sty.freeBox__size_large__wSxoihg0PU]: hasVariant(
              variants,
              "size",
              "large"
            ),
            [sty.freeBox__size_small__wSxoi9MDHg]: hasVariant(
              variants,
              "size",
              "small"
            )
          })}
        >
          {(
            hasVariant(variants, "icons", "end")
              ? true
              : hasVariant(variants, "icons", "none")
              ? true
              : true
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg__tHBdJ)}
                    role={"img"}
                  />
                ),

                value: args.children,
                className: classNames(sty.slotTargetChildren, {
                  [sty.slotTargetChildren__colors_black]: hasVariant(
                    variants,
                    "colors",
                    "black"
                  ),
                  [sty.slotTargetChildren__colors_blue]: hasVariant(
                    variants,
                    "colors",
                    "blue"
                  ),
                  [sty.slotTargetChildren__colors_gray]: hasVariant(
                    variants,
                    "colors",
                    "gray"
                  ),
                  [sty.slotTargetChildren__icons_end]: hasVariant(
                    variants,
                    "icons",
                    "end"
                  ),
                  [sty.slotTargetChildren__icons_five]: hasVariant(
                    variants,
                    "icons",
                    "five"
                  ),
                  [sty.slotTargetChildren__icons_none]: hasVariant(
                    variants,
                    "icons",
                    "none"
                  ),
                  [sty.slotTargetChildren__size_large]: hasVariant(
                    variants,
                    "size",
                    "large"
                  ),
                  [sty.slotTargetChildren__size_small]: hasVariant(
                    variants,
                    "size",
                    "small"
                  )
                })
              })
            : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "icons", "five")
          ? true
          : hasVariant(variants, "icons", "end")
          ? false
          : hasVariant(variants, "icons", "none")
          ? false
          : false
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__tdpqK, {
            [sty.freeBox__icons_end__tdpqKaRdN3]: hasVariant(
              variants,
              "icons",
              "end"
            ),
            [sty.freeBox__icons_five__tdpqKgyw2T]: hasVariant(
              variants,
              "icons",
              "five"
            ),
            [sty.freeBox__icons_none__tdpqKy08Cm]: hasVariant(
              variants,
              "icons",
              "none"
            ),
            [sty.freeBox__size_large__tdpqKhg0PU]: hasVariant(
              variants,
              "size",
              "large"
            ),
            [sty.freeBox__size_small__tdpqK9MDHg]: hasVariant(
              variants,
              "size",
              "small"
            )
          })}
        >
          {(
            hasVariant(variants, "icons", "end")
              ? true
              : hasVariant(variants, "icons", "none")
              ? true
              : true
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg__lswGq)}
                    role={"img"}
                  />
                ),

                value: args.children3,
                className: classNames(sty.slotTargetChildren3, {
                  [sty.slotTargetChildren3__colors_black]: hasVariant(
                    variants,
                    "colors",
                    "black"
                  ),
                  [sty.slotTargetChildren3__colors_blue]: hasVariant(
                    variants,
                    "colors",
                    "blue"
                  ),
                  [sty.slotTargetChildren3__colors_gray]: hasVariant(
                    variants,
                    "colors",
                    "gray"
                  ),
                  [sty.slotTargetChildren3__icons_end]: hasVariant(
                    variants,
                    "icons",
                    "end"
                  ),
                  [sty.slotTargetChildren3__icons_none]: hasVariant(
                    variants,
                    "icons",
                    "none"
                  ),
                  [sty.slotTargetChildren3__size_large]: hasVariant(
                    variants,
                    "size",
                    "large"
                  ),
                  [sty.slotTargetChildren3__size_small]: hasVariant(
                    variants,
                    "size",
                    "small"
                  )
                })
              })
            : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "icons", "five")
          ? true
          : hasVariant(variants, "icons", "end")
          ? false
          : hasVariant(variants, "icons", "none")
          ? false
          : false
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__vu4IA, {
            [sty.freeBox__icons_end__vu4IAaRdN3]: hasVariant(
              variants,
              "icons",
              "end"
            ),
            [sty.freeBox__icons_five__vu4IAgyw2T]: hasVariant(
              variants,
              "icons",
              "five"
            ),
            [sty.freeBox__icons_none__vu4IAy08Cm]: hasVariant(
              variants,
              "icons",
              "none"
            ),
            [sty.freeBox__size_large__vu4IAhg0PU]: hasVariant(
              variants,
              "size",
              "large"
            ),
            [sty.freeBox__size_small__vu4IA9MDHg]: hasVariant(
              variants,
              "size",
              "small"
            )
          })}
        >
          {(
            hasVariant(variants, "icons", "end")
              ? true
              : hasVariant(variants, "icons", "none")
              ? true
              : true
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg__fFhi)}
                    role={"img"}
                  />
                ),

                value: args.children32,
                className: classNames(sty.slotTargetChildren32, {
                  [sty.slotTargetChildren32__colors_black]: hasVariant(
                    variants,
                    "colors",
                    "black"
                  ),
                  [sty.slotTargetChildren32__colors_blue]: hasVariant(
                    variants,
                    "colors",
                    "blue"
                  ),
                  [sty.slotTargetChildren32__colors_gray]: hasVariant(
                    variants,
                    "colors",
                    "gray"
                  ),
                  [sty.slotTargetChildren32__icons_end]: hasVariant(
                    variants,
                    "icons",
                    "end"
                  ),
                  [sty.slotTargetChildren32__icons_none]: hasVariant(
                    variants,
                    "icons",
                    "none"
                  ),
                  [sty.slotTargetChildren32__size_large]: hasVariant(
                    variants,
                    "size",
                    "large"
                  ),
                  [sty.slotTargetChildren32__size_small]: hasVariant(
                    variants,
                    "size",
                    "small"
                  )
                })
              })
            : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "icons", "five")
          ? true
          : hasVariant(variants, "icons", "end")
          ? false
          : hasVariant(variants, "icons", "none")
          ? false
          : false
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__wxLEf, {
            [sty.freeBox__icons_end__wxLEfARdN3]: hasVariant(
              variants,
              "icons",
              "end"
            ),
            [sty.freeBox__icons_five__wxLEfGyw2T]: hasVariant(
              variants,
              "icons",
              "five"
            ),
            [sty.freeBox__icons_none__wxLEfY08Cm]: hasVariant(
              variants,
              "icons",
              "none"
            ),
            [sty.freeBox__size_large__wxLEfHg0PU]: hasVariant(
              variants,
              "size",
              "large"
            ),
            [sty.freeBox__size_small__wxLEf9MDHg]: hasVariant(
              variants,
              "size",
              "small"
            )
          })}
        >
          {(
            hasVariant(variants, "icons", "end")
              ? true
              : hasVariant(variants, "icons", "none")
              ? true
              : true
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg__ussC)}
                    role={"img"}
                  />
                ),

                value: args.children322,
                className: classNames(sty.slotTargetChildren322, {
                  [sty.slotTargetChildren322__colors_black]: hasVariant(
                    variants,
                    "colors",
                    "black"
                  ),
                  [sty.slotTargetChildren322__colors_blue]: hasVariant(
                    variants,
                    "colors",
                    "blue"
                  ),
                  [sty.slotTargetChildren322__colors_gray]: hasVariant(
                    variants,
                    "colors",
                    "gray"
                  ),
                  [sty.slotTargetChildren322__icons_end]: hasVariant(
                    variants,
                    "icons",
                    "end"
                  ),
                  [sty.slotTargetChildren322__icons_none]: hasVariant(
                    variants,
                    "icons",
                    "none"
                  ),
                  [sty.slotTargetChildren322__size_large]: hasVariant(
                    variants,
                    "size",
                    "large"
                  ),
                  [sty.slotTargetChildren322__size_small]: hasVariant(
                    variants,
                    "size",
                    "small"
                  )
                })
              })
            : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "icons", "five")
          ? true
          : hasVariant(variants, "icons", "end")
          ? false
          : hasVariant(variants, "icons", "none")
          ? false
          : false
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__r3R5, {
            [sty.freeBox__icons_end__r3R5ARdN3]: hasVariant(
              variants,
              "icons",
              "end"
            ),
            [sty.freeBox__icons_five__r3R5Gyw2T]: hasVariant(
              variants,
              "icons",
              "five"
            ),
            [sty.freeBox__icons_none__r3R5Y08Cm]: hasVariant(
              variants,
              "icons",
              "none"
            ),
            [sty.freeBox__size_large__r3R5Hg0PU]: hasVariant(
              variants,
              "size",
              "large"
            ),
            [sty.freeBox__size_small__r3R59MDHg]: hasVariant(
              variants,
              "size",
              "small"
            )
          })}
        >
          {(
            hasVariant(variants, "icons", "end")
              ? true
              : hasVariant(variants, "icons", "none")
              ? true
              : true
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg__t3XgD)}
                    role={"img"}
                  />
                ),

                value: args.children3222,
                className: classNames(sty.slotTargetChildren3222, {
                  [sty.slotTargetChildren3222__colors_black]: hasVariant(
                    variants,
                    "colors",
                    "black"
                  ),
                  [sty.slotTargetChildren3222__colors_blue]: hasVariant(
                    variants,
                    "colors",
                    "blue"
                  ),
                  [sty.slotTargetChildren3222__colors_gray]: hasVariant(
                    variants,
                    "colors",
                    "gray"
                  ),
                  [sty.slotTargetChildren3222__icons_end]: hasVariant(
                    variants,
                    "icons",
                    "end"
                  ),
                  [sty.slotTargetChildren3222__icons_none]: hasVariant(
                    variants,
                    "icons",
                    "none"
                  ),
                  [sty.slotTargetChildren3222__size_large]: hasVariant(
                    variants,
                    "size",
                    "large"
                  ),
                  [sty.slotTargetChildren3222__size_small]: hasVariant(
                    variants,
                    "size",
                    "small"
                  )
                })
              })
            : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "icons", "five")
          ? false
          : hasVariant(variants, "icons", "only")
          ? false
          : true
      )
        ? p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.slot,
            className: classNames(sty.slotTargetSlot, {
              [sty.slotTargetSlot__colors_black]: hasVariant(
                variants,
                "colors",
                "black"
              ),
              [sty.slotTargetSlot__colors_blue]: hasVariant(
                variants,
                "colors",
                "blue"
              ),
              [sty.slotTargetSlot__colors_gray]: hasVariant(
                variants,
                "colors",
                "gray"
              ),
              [sty.slotTargetSlot__icons_both]: hasVariant(
                variants,
                "icons",
                "both"
              ),
              [sty.slotTargetSlot__icons_end]: hasVariant(
                variants,
                "icons",
                "end"
              ),
              [sty.slotTargetSlot__icons_five]: hasVariant(
                variants,
                "icons",
                "five"
              ),
              [sty.slotTargetSlot__icons_only]: hasVariant(
                variants,
                "icons",
                "only"
              ),
              [sty.slotTargetSlot__link]: hasVariant(variants, "link", "link"),
              [sty.slotTargetSlot__size_large]: hasVariant(
                variants,
                "size",
                "large"
              ),
              [sty.slotTargetSlot__size_small]: hasVariant(
                variants,
                "size",
                "small"
              )
            })
          })
        : null}
      {(
        hasVariant(variants, "icons", "both")
          ? true
          : hasVariant(variants, "icons", "end")
          ? true
          : false
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__fAjom, {
            [sty.freeBox__icons_both__fAjomBnJeN]: hasVariant(
              variants,
              "icons",
              "both"
            ),
            [sty.freeBox__icons_end__fAjomaRdN3]: hasVariant(
              variants,
              "icons",
              "end"
            ),
            [sty.freeBox__icons_five__fAjomgyw2T]: hasVariant(
              variants,
              "icons",
              "five"
            ),
            [sty.freeBox__size_small__fAjom9MDHg]: hasVariant(
              variants,
              "size",
              "small"
            )
          })}
        >
          {(
            hasVariant(variants, "icons", "both")
              ? true
              : hasVariant(variants, "icons", "end")
              ? true
              : hasVariant(variants, "icons", "none")
              ? false
              : false
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg__xjBox)}
                    role={"img"}
                  />
                ),

                value: args.children2,
                className: classNames(sty.slotTargetChildren2, {
                  [sty.slotTargetChildren2__colors_black]: hasVariant(
                    variants,
                    "colors",
                    "black"
                  ),
                  [sty.slotTargetChildren2__icons_both]: hasVariant(
                    variants,
                    "icons",
                    "both"
                  ),
                  [sty.slotTargetChildren2__icons_end]: hasVariant(
                    variants,
                    "icons",
                    "end"
                  ),
                  [sty.slotTargetChildren2__icons_none]: hasVariant(
                    variants,
                    "icons",
                    "none"
                  ),
                  [sty.slotTargetChildren2__link]: hasVariant(
                    variants,
                    "link",
                    "link"
                  )
                })
              })
            : null}
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButton__VariantsArgs;
    args?: PlasmicButton__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicButton__Fetches;
  } & Omit<PlasmicButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButton__ArgProps,
      internalVariantPropNames: PlasmicButton__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
